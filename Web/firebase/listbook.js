// listbook.js - Load danh s√°ch s√°ch t·ª´ Firebase
console.log("‚úÖ listbook.js loaded");

import { db, rtdb } from './firebase.js';
import { collection, getDocs, query, where, orderBy } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";
import { ref, onValue } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-database.js";

// Load danh s√°ch s√°ch c√≤n (available books)
window.loadBookList = async function() {
    try {
        console.log("üìö ƒêang t·∫£i danh s√°ch s√°ch...");
        
        // Load t·ª´ Firestore
        const booksRef = collection(db, "books");
        const q = query(booksRef, where("status", "==", "C√≤n"), orderBy("title"));
        const querySnapshot = await getDocs(q);
        
        const books = [];
        querySnapshot.forEach((doc) => {
            books.push({ id: doc.id, ...doc.data() });
        });
        
        console.log(`‚úÖ ƒê√£ t·∫£i ${books.length} cu·ªën s√°ch t·ª´ Firestore`);
        
        // Hi·ªÉn th·ªã danh s√°ch s√°ch
        displayBooks(books);
        
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch s√°ch:", error);
        
        // Fallback: Load t·ª´ Realtime Database
        try {
            console.log("üîÑ Th·ª≠ t·∫£i t·ª´ Realtime Database...");
            const booksRef = ref(rtdb, "books");
            onValue(booksRef, (snapshot) => {
                if (snapshot.exists()) {
                    const data = snapshot.val();
                    const books = Object.keys(data)
                        .map(key => ({ id: key, ...data[key] }))
                        .filter(book => book.status === "C√≤n");
                    
                    console.log(`‚úÖ ƒê√£ t·∫£i ${books.length} cu·ªën s√°ch t·ª´ Realtime DB`);
                    displayBooks(books);
                } else {
                    console.log("üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu s√°ch");
                    displayBooks([]);
                }
            });
        } catch (rtdbError) {
            console.error("‚ùå L·ªói Realtime Database:", rtdbError);
            displayBooks([]);
        }
    }
};

// Hi·ªÉn th·ªã danh s√°ch s√°ch trong b·∫£ng
function displayBooks(books) {
    const tableBody = document.getElementById('booksBody');
    if (!tableBody) {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y booksBody element");
        return;
    }
    
    // X√≥a n·ªôi dung c≈©
    tableBody.innerHTML = '';
    
    if (books.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="5" style="text-align: center; padding: 40px; color: #666; font-style: italic;">
                    üìö Kh√¥ng c√≥ s√°ch n√†o trong th∆∞ vi·ªán
                </td>
            </tr>
        `;
        return;
    }
    
    // Hi·ªÉn th·ªã t·ª´ng s√°ch
    books.forEach((book, index) => {
        const row = document.createElement('tr');
        row.style.cssText = `
            transition: all 0.3s ease;
            cursor: pointer;
        `;
        
        row.innerHTML = `
            <td style="padding: 12px 8px; color: #333; font-weight: 500;">${book.title || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #666;">${book.id || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #666;">${book.author || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #666;">${book.genre || 'N/A'}</td>
            <td style="padding: 12px 8px;">
                <span style="
                    padding: 6px 12px;
                    border-radius: 20px;
                    font-size: 0.85rem;
                    font-weight: 600;
                    background: #d1fae5;
                    color: #065f46;
                ">
                    ${book.status || 'C√≤n'}
                </span>
            </td>
        `;
        
        // Th√™m hover effect
        row.addEventListener('mouseenter', function() {
            this.style.background = '#f8fafc';
            this.style.transform = 'translateX(5px)';
        });
        
        row.addEventListener('mouseleave', function() {
            this.style.background = '';
            this.style.transform = 'translateX(0)';
        });
        
        // Th√™m click event ƒë·ªÉ m∆∞·ª£n s√°ch nhanh
        row.addEventListener('click', function() {
            quickBorrowBook(book);
        });
        
        tableBody.appendChild(row);
    });
    
    console.log(`‚úÖ ƒê√£ hi·ªÉn th·ªã ${books.length} cu·ªën s√°ch`);
}

// M∆∞·ª£n s√°ch nhanh khi click v√†o d√≤ng
function quickBorrowBook(book) {
    if (confirm(`B·∫°n c√≥ mu·ªën m∆∞·ª£n s√°ch "${book.title}" kh√¥ng?`)) {
        // M·ªü modal m∆∞·ª£n s√°ch v√† ƒëi·ªÅn th√¥ng tin s√°ch
        if (window.openBorrowForm) {
            openBorrowForm();
            
            // ƒêi·ªÅn th√¥ng tin s√°ch
            setTimeout(() => {
                const bookIdInput = document.getElementById('bookId');
                const bookNameInput = document.getElementById('bookNameBorrow');
                
                if (bookIdInput) bookIdInput.value = book.id;
                if (bookNameInput) bookNameInput.value = book.title;
                
                // Focus v√†o √¥ t√™n sinh vi√™n
                const studentNameInput = document.getElementById('studentName');
                if (studentNameInput) studentNameInput.focus();
            }, 100);
        }
    }
}

// Load danh s√°ch s√°ch khi trang load
document.addEventListener('DOMContentLoaded', function() {
    // Ch·ªâ load n·∫øu ƒëang ·ªü trang Admin
    if (window.location.pathname.includes('Admin')) {
        console.log("üîç ƒêang ·ªü trang Admin, load danh s√°ch s√°ch...");
        loadBookList();
    }
});

// Export function ƒë·ªÉ c√°c file kh√°c c√≥ th·ªÉ g·ªçi
window.loadBookList = loadBookList;