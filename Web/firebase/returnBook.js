// returnBook.js - X·ª≠ l√Ω tr·∫£ s√°ch
console.log("‚úÖ returnBook.js loaded");

import { db, rtdb } from './firebase.js';
import { collection, getDocs, query, where, doc, updateDoc } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";
import { ref, onValue, update, remove } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-database.js";

// Load danh s√°ch s√°ch ƒëang m∆∞·ª£n ƒë·ªÉ tr·∫£
window.loadReturnBookList = async function() {
    try {
        console.log("üìö ƒêang t·∫£i danh s√°ch s√°ch c·∫ßn tr·∫£...");
        
        // Load t·ª´ Firestore
        const historyRef = collection(db, "history");
        const q = query(historyRef, where("status", "==", "ƒêang m∆∞·ª£n"));
        const querySnapshot = await getDocs(q);
        
        const borrowedBooks = [];
        querySnapshot.forEach((doc) => {
            borrowedBooks.push({ id: doc.id, ...doc.data() });
        });
        
        console.log(`‚úÖ ƒê√£ t·∫£i ${borrowedBooks.length} cu·ªën s√°ch ƒëang m∆∞·ª£n t·ª´ Firestore`);
        
        // Hi·ªÉn th·ªã danh s√°ch
        displayReturnBookList(borrowedBooks);
        
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch s√°ch c·∫ßn tr·∫£:", error);
        
        // Fallback: Load t·ª´ Realtime Database
        try {
            console.log("üîÑ Th·ª≠ t·∫£i t·ª´ Realtime Database...");
            const historyRef = ref(rtdb, "history");
            onValue(historyRef, (snapshot) => {
                if (snapshot.exists()) {
                    const data = snapshot.val();
                    const borrowedBooks = Object.keys(data)
                        .map(key => ({ id: key, ...data[key] }))
                        .filter(record => record.status === "ƒêang m∆∞·ª£n");
                    
                    console.log(`‚úÖ ƒê√£ t·∫£i ${borrowedBooks.length} cu·ªën s√°ch ƒëang m∆∞·ª£n t·ª´ Realtime DB`);
                    displayReturnBookList(borrowedBooks);
                } else {
                    console.log("üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu s√°ch ƒëang m∆∞·ª£n");
                    displayReturnBookList([]);
                }
            });
        } catch (rtdbError) {
            console.error("‚ùå L·ªói Realtime Database:", rtdbError);
            displayReturnBookList([]);
        }
    }
};

// Hi·ªÉn th·ªã danh s√°ch s√°ch c·∫ßn tr·∫£
function displayReturnBookList(books) {
    const tableBody = document.getElementById('returnBookTableBody');
    if (!tableBody) {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y returnBookTableBody element");
        return;
    }
    
    // X√≥a n·ªôi dung c≈©
    tableBody.innerHTML = '';
    
    if (books.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="8" style="text-align: center; padding: 40px; color: #666; font-style: italic;">
                    üìö Kh√¥ng c√≥ s√°ch n√†o ƒëang ƒë∆∞·ª£c m∆∞·ª£n
                </td>
            </tr>
        `;
        return;
    }
    
    // Hi·ªÉn th·ªã t·ª´ng s√°ch
    books.forEach((book, index) => {
        const row = document.createElement('tr');
        row.style.cssText = `
            transition: all 0.3s ease;
        `;
        
        // Ki·ªÉm tra c√≥ qu√° h·∫°n kh√¥ng
        const returnDate = new Date(book.returnDate);
        const today = new Date();
        const isOverdue = today > returnDate;
        
        row.innerHTML = `
            <td style="padding: 12px 8px; color: #333; font-weight: 500;">${book.studentName || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #666;">${book.studentId || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #333; font-weight: 500;">${book.bookName || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #666;">${book.bookId || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #666;">${formatDate(book.borrowDate) || 'N/A'}</td>
            <td style="padding: 12px 8px; color: ${isOverdue ? '#dc2626' : '#666'};">${formatDate(book.returnDate) || 'N/A'}</td>
            <td style="padding: 12px 8px;">
                <span style="
                    padding: 6px 12px;
                    border-radius: 20px;
                    font-size: 0.85rem;
                    font-weight: 600;
                    background: ${isOverdue ? '#fee2e2' : '#fef3c7'};
                    color: ${isOverdue ? '#991b1b' : '#92400e'};
                ">
                    ${isOverdue ? 'Qu√° h·∫°n' : book.status || 'ƒêang m∆∞·ª£n'}
                </span>
            </td>
            <td style="padding: 12px 8px; text-align: center;">
                <button onclick="processReturnBook('${book.id}', '${book.studentName}', '${book.bookName}')" 
                        style="
                            background: linear-gradient(135deg, #10b981, #34d399);
                            color: white;
                            border: none;
                            padding: 8px 16px;
                            border-radius: 8px;
                            font-size: 0.85rem;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
                        "
                        onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(16, 185, 129, 0.4)'"
                        onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(16, 185, 129, 0.3)'">
                    Tr·∫£ s√°ch
                </button>
            </td>
        `;
        
        // Th√™m hover effect
        row.addEventListener('mouseenter', function() {
            this.style.background = '#f8fafc';
        });
        
        row.addEventListener('mouseleave', function() {
            this.style.background = '';
        });
        
        tableBody.appendChild(row);
    });
    
    console.log(`‚úÖ ƒê√£ hi·ªÉn th·ªã ${books.length} cu·ªën s√°ch c·∫ßn tr·∫£`);
}

// X·ª≠ l√Ω tr·∫£ s√°ch
window.processReturnBook = async function(historyId, studentName, bookName) {
    if (!confirm(`X√°c nh·∫≠n tr·∫£ s√°ch?\n\nSinh vi√™n: ${studentName}\nS√°ch: ${bookName}`)) {
        return;
    }
    
    try {
        console.log(`üìö ƒêang x·ª≠ l√Ω tr·∫£ s√°ch: ${historyId}`);
        
        // 1. C·∫≠p nh·∫≠t tr·∫°ng th√°i trong history
        const returnDate = new Date().toISOString().split('T')[0];
        
        // Firestore
        const historyDocRef = doc(db, "history", historyId);
        await updateDoc(historyDocRef, {
            status: "ƒê√£ tr·∫£",
            actualReturnDate: returnDate,
            updatedAt: new Date().toISOString()
        });
        
        // Realtime Database
        await update(ref(rtdb, `history/${historyId}`), {
            status: "ƒê√£ tr·∫£",
            actualReturnDate: returnDate,
            updatedAt: new Date().toISOString()
        });
        
        // 2. C·∫≠p nh·∫≠t tr·∫°ng th√°i s√°ch v·ªÅ "C√≤n"
        // C·∫ßn l·∫•y bookId t·ª´ history record
        const historyRef = ref(rtdb, `history/${historyId}`);
        onValue(historyRef, async (snapshot) => {
            if (snapshot.exists()) {
                const historyData = snapshot.val();
                const bookId = historyData.bookId;
                
                if (bookId) {
                    try {
                        // Firestore
                        const bookDocRef = doc(db, "books", bookId);
                        await updateDoc(bookDocRef, {
                            status: "C√≤n",
                            updatedAt: new Date().toISOString()
                        });
                        
                        // Realtime Database
                        await update(ref(rtdb, `books/${bookId}`), {
                            status: "C√≤n",
                            updatedAt: new Date().toISOString()
                        });
                        
                        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i s√°ch ${bookId} th√†nh "C√≤n"`);
                    } catch (bookError) {
                        console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i s√°ch:", bookError);
                    }
                }
            }
        }, { once: true });
        
        // 3. X√≥a kh·ªèi user profile (n·∫øu c√≥)
        // C·∫ßn l·∫•y studentId t·ª´ history record
        onValue(historyRef, async (snapshot) => {
            if (snapshot.exists()) {
                const historyData = snapshot.val();
                const studentId = historyData.studentId;
                const bookId = historyData.bookId;
                
                if (studentId && bookId) {
                    try {
                        // X√≥a kh·ªèi user profile trong Firestore
                        const userBookRef = doc(db, "users", studentId, "books", bookId);
                        await remove(ref(rtdb, `users/${studentId}/books/${bookId}`));
                        
                        console.log(`‚úÖ ƒê√£ x√≥a s√°ch kh·ªèi profile sinh vi√™n ${studentId}`);
                    } catch (userError) {
                        console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a s√°ch kh·ªèi profile sinh vi√™n:", userError);
                    }
                }
            }
        }, { once: true });
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        const successMessage = `‚úÖ Tr·∫£ s√°ch th√†nh c√¥ng!\n\nSinh vi√™n: ${studentName}\nS√°ch: ${bookName}\nNg√†y tr·∫£: ${returnDate}`;
        alert(successMessage);
        
        // Reload danh s√°ch
        loadReturnBookList();
        
        // Reload c√°c danh s√°ch kh√°c n·∫øu c·∫ßn
        if (window.loadBookList) loadBookList();
        if (window.loadHistory) loadHistory();
        
    } catch (error) {
        console.error("‚ùå L·ªói khi tr·∫£ s√°ch:", error);
        alert("Kh√¥ng th·ªÉ tr·∫£ s√°ch: " + error.message);
    }
};

// Format date t·ª´ string sang ƒë·ªãnh d·∫°ng Vi·ªát Nam
function formatDate(dateString) {
    if (!dateString) return 'N/A';
    
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('vi-VN', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    } catch (error) {
        return dateString; // Tr·∫£ v·ªÅ string g·ªëc n·∫øu kh√¥ng parse ƒë∆∞·ª£c
    }
}

// Load danh s√°ch khi modal m·ªü
window.openReturnBookForm = function() {
    const modal = document.getElementById('returnBookModal');
    if (modal) {
        modal.style.display = 'flex';
        loadReturnBookList();
    }
};

// ƒê√≥ng modal
window.closeReturnBookForm = function() {
    const modal = document.getElementById('returnBookModal');
    if (modal) {
        modal.style.display = 'none';
    }
};

// Load danh s√°ch khi trang load
document.addEventListener('DOMContentLoaded', function() {
    // Ch·ªâ load n·∫øu ƒëang ·ªü trang Admin
    if (window.location.pathname.includes('Admin')) {
        console.log("üîç ƒêang ·ªü trang Admin, s·∫µn s√†ng load danh s√°ch tr·∫£ s√°ch...");
    }
});

// Export functions
window.loadReturnBookList = loadReturnBookList;
window.processReturnBook = processReturnBook;
window.openReturnBookForm = openReturnBookForm;
window.closeReturnBookForm = closeReturnBookForm;