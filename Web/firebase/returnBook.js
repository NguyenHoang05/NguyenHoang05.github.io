// ‚úÖ returnBook.js - X·ª≠ l√Ω tr·∫£ s√°ch & giao ti·∫øp Firebase
console.log("‚úÖ returnBook.js loaded");

import { db, rtdb } from './firebase.js'; // ƒê·∫£m b·∫£o ƒë√∫ng ƒë∆∞·ªùng d·∫´n import
import {
  collection, getDocs, query, where, doc, updateDoc, getDoc, deleteDoc
} from "https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";
import {
  ref, onValue, update, remove, set
} from "https://www.gstatic.com/firebasejs/11.10.0/firebase-database.js";

// C·ªù ƒëi·ªÅu khi·ªÉn m·ªü modal Tr·∫£ s√°ch ƒë·ªÉ tr√°nh xung ƒë·ªôt v·ªõi ph·∫ßn M∆∞·ª£n
let openReturnEnabled = false;
onValue(ref(rtdb, "temp/openReturn"), (snapshot) => {
  openReturnEnabled = !!snapshot.val();
  console.log("C·ªù m·ªü modal Tr·∫£ s√°ch:", openReturnEnabled);
});

// Bi·∫øn ƒë·ªÉ l∆∞u timeout c·ªßa th√¥ng b√°o l·ªói
let wrongReturnMessageTimeout = null;
let isShowingWrongMessage = false;

// ======================================================
// üîπ C√°c h√†m Helper (Gi·ªØ nguy√™n)
// ======================================================

function extractStudentId(payload) {
  if (!payload) return null;
  if (typeof payload === 'string') return payload;
  if (payload.iduser) return payload.iduser;
  if (payload.id) return payload.id;
  if (payload.ID) return payload.ID;
  if (payload.mssv) return payload.mssv;
  return null;
}

function extractBookId(payload) {
  if (!payload) return null;
  if (typeof payload === 'object') {
    if (payload.id || payload.bookId || payload.ID) {
      return payload.id || payload.bookId || payload.ID;
    }
    const keys = Object.keys(payload);
    if (keys.length === 1 && typeof payload[keys[0]] === 'object') {
      const v = payload[keys[0]];
      return v.id || v.bookId || v.ID || null;
    }
    if (payload.rfid && typeof payload.rfid === 'string') return payload.rfid;
  }
  if (typeof payload === 'string') return payload;
  return null;
}

function findCheckboxByBookId(bookId) {
  const safeBookId = bookId ? bookId.replace(/"/g, '\\"') : '';
  return document.querySelector(`.bookCheckbox[data-bookid="${safeBookId}"]`);
}

// ======================================================
// üîπ L·∫Øng nghe RFID (Gi·ªØ nguy√™n)
// ======================================================
// ... (T·∫•t c·∫£ logic l·∫Øng nghe onValue gi·ªØ nguy√™n)

onValue(ref(rtdb, "temp/student"), async (snapshot) => {
  const s = snapshot.val();
  if (!s) return;

  const studentId = extractStudentId(s);
  if (!studentId) return;
  console.log("üì° [Return] Qu√©t RFID sinh vi√™n:", studentId);

  const modal = document.getElementById("returnBookModal");
  if (openReturnEnabled && modal && modal.style.display !== "flex") {
    window.openReturnBookForm();
  }

  const idInput = document.getElementById("returnStudentId");
  if (idInput) idInput.value = studentId;

  await loadStudentInfo(studentId);
  await loadReturnBookList(studentId);
});

onValue(ref(rtdb, "temp/books"), async (snapshot) => {
  const payload = snapshot.val();
  console.log('[Return][temp/books] payload =', payload);
  if (!payload) return;

  if (typeof payload === 'object' && !Array.isArray(payload)) {
    const keys = Object.keys(payload);
    for (const k of keys) {
      const it = payload[k];
      let scannedBookId = extractBookId(it) || k;
      
      if (scannedBookId) {
        console.log('üì° [Return] Qu√©t RFID s√°ch (temp/books child):', scannedBookId);
        await handleBookScan(scannedBookId);
        
        try {
            await remove(ref(rtdb, `temp/books/${k}`));
            console.log(`üóëÔ∏è ƒê√£ x√≥a temp/books/${k} sau khi x·ª≠ l√Ω`);
        } catch (e) { console.error("L·ªói x√≥a node s√°ch con:", e); }
      }
    }
    return;
  }
  
  let scannedBookId = extractBookId(payload);
  if (!scannedBookId) return;
  console.log('üì° [Return] Qu√©t RFID s√°ch (temp/books):', scannedBookId);
  handleBookScan(scannedBookId);
});

onValue(ref(rtdb, "temp/book"), async (snapshot) => {
  const b = snapshot.val();
  if (!b) return;

  const scannedBookId = extractBookId(b);
  console.log('[Return][temp/book] payload =', b, '‚Üí scannedId =', scannedBookId);
  if (!scannedBookId) return;
  console.log("üì° [Return] Qu√©t RFID s√°ch:", scannedBookId);

  handleBookScan(scannedBookId);
});

onValue(ref(rtdb, "book1"), async (snapshot) => {
  const v = snapshot.val();
  if (!v) return;
  const scannedBookId = extractBookId(v);
  if (!scannedBookId) return;
  console.log("üì° [Return] Qu√©t RFID s√°ch (root/book1):", scannedBookId);

  handleBookScan(scannedBookId);
});

onValue(ref(rtdb, "temp"), async (snapshot) => {
  const t = snapshot.val();
  if (!t) return;

  if (t.student || t.book || t.books) return;

  const legacyStudentId = t.ID || t.iduser || t.id;
  if (legacyStudentId && typeof legacyStudentId === 'string') {
    const modal = document.getElementById("returnBookModal");
    if (openReturnEnabled && modal && modal.style.display !== "flex") {
      window.openReturnBookForm();
    }
    const idInput = document.getElementById("returnStudentId");
    if (idInput) idInput.value = legacyStudentId;
    await loadStudentInfo(legacyStudentId);
    await loadReturnBookList(legacyStudentId);
    return;
  }

  const legacyBookId = t.bookId || t.id || null;
  if (legacyBookId) {
    handleBookScan(legacyBookId);
  }
});


// ======================================================
// üîπ X·ª≠ l√Ω qu√©t s√°ch v·ªõi logic c·∫£i ti·∫øn (Gi·ªØ nguy√™n)
// ======================================================
function handleBookScan(scannedBookId) {
  console.log(`üîç [Return] X·ª≠ l√Ω qu√©t s√°ch: ${scannedBookId}`);
  
  const checkbox = findCheckboxByBookId(scannedBookId);
  
  if (checkbox) {
    console.log(`‚úÖ [Return] S√°ch ƒë√∫ng: ${checkbox.dataset.name}`);
    
    if (isShowingWrongMessage) {
      hideWrongReturnMessage();
    }
    
    const wasChecked = checkbox.checked;
    checkbox.checked = true;
    if (!wasChecked) {
      window.toggleSelectedBook(checkbox);
    }
    
    updateSelectedSummary({ 
      bookName: checkbox.dataset.name, 
      bookId: scannedBookId, 
      type: 'success' 
    });
    
    console.log(`‚úÖ [Return] ƒê√£ ch·ªçn s√°ch: ${checkbox.dataset.name}`);
  } else {
    console.log(`‚ùå [Return] S√°ch sai: ${scannedBookId}`);
    
    showWrongReturnMessage();
    
    updateSelectedSummary({ 
      type: 'error', 
      message: 'Tr·∫£ sai s√°ch vui l√≤ng ch·ªçn s√°ch kh√°c', 
      bookId: scannedBookId 
    });
    
    console.log(`‚ùå [Return] Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho s√°ch: ${scannedBookId}`);
  }
}

// ======================================================
// üîπ M·ªü / ƒë√≥ng modal (C·∫≠p nh·∫≠t logic d·ªçn d·∫πp RTDB)
// ======================================================
window.openReturnBookForm = function() {
  document.getElementById("returnBookModal").style.display = "flex";
  
  // Reset tr·∫°ng th√°i th√¥ng b√°o
  isShowingWrongMessage = false;
  if (wrongReturnMessageTimeout) {
    clearTimeout(wrongReturnMessageTimeout);
    wrongReturnMessageTimeout = null;
  }
  
  // ·∫®n th√¥ng b√°o tr·∫£ sai s√°ch khi m·ªü modal
  hideWrongReturnMessage();
  
  // Reset c√°c tr∆∞·ªùng form
  document.getElementById("returnStudentName").value = "";
  document.getElementById("returnMssv").value = "";
  
  const wrongMsg = document.getElementById("wrongReturnMsg");
  if (wrongMsg) {
    wrongMsg.style.display = "none";
  }
  
  // Reset t√≥m t·∫Øt
  const summaryBox = document.getElementById('selectedSummary');
  if (summaryBox) {
    summaryBox.style.display = 'none';
    summaryBox.innerHTML = '';
  }

  // üí° LOGIC C·∫¨P NH·∫¨T: D·ªåN D·∫∏P NODE S√ÅCH V√Ä C·ªú TR·∫¢ S√ÅCH KHI M·ªû FORM
  // Ch·ªâ x√≥a c√°c node s√°ch v√† c·ªù m·ªü form ƒë·ªÉ chu·∫©n b·ªã cho l·∫ßn qu√©t m·ªõi.
  // GI·ªÆ L·∫†I temp/student ƒë·ªÉ b√™n M∆∞·ª£n s√°ch c√≥ th·ªÉ s·ª≠ d·ª•ng (n·∫øu c√≥).
  try {
    remove(ref(rtdb, "temp/openReturn")).catch(() => {});
    remove(ref(rtdb, "temp/book")).catch(() => {});
     remove(ref(rtdb, "temp/bookBorrow")).catch(() => {});
    remove(ref(rtdb, "temp/books")).catch(() => {});
    remove(ref(rtdb, "book1")).catch(() => {});
    console.log("üßπ D·ªçn d·∫πp c·ªù v√† c√°c node s√°ch (temp/book, temp/books, book1) khi m·ªü form Tr·∫£ s√°ch.");
  } catch (e) {
    console.error("L·ªói khi d·ªçn d·∫πp RTDB khi m·ªü form:", e);
  }
  
  console.log("üìñ ƒê√£ m·ªü form tr·∫£ s√°ch - reset tr·∫°ng th√°i");
};

window.closeReturnBookForm = function() {
  document.getElementById("returnBookModal").style.display = "none";
  
  isShowingWrongMessage = false;
  if (wrongReturnMessageTimeout) {
    clearTimeout(wrongReturnMessageTimeout);
    wrongReturnMessageTimeout = null;
  }
  
  hideWrongReturnMessage();
  
  const wrongMsg = document.getElementById("wrongReturnMsg");
  if (wrongMsg) {
    wrongMsg.style.display = "none";
  }
  
  const summaryBox = document.getElementById('selectedSummary');
  if (summaryBox) {
    summaryBox.style.display = 'none';
    summaryBox.innerHTML = '';
  }
  
  console.log("‚ùå ƒê√£ ƒë√≥ng form tr·∫£ s√°ch - reset tr·∫°ng th√°i");
};

// ======================================================
// üîπ L·∫•y th√¥ng tin sinh vi√™n t·ª´ Firestore (Gi·ªØ nguy√™n)
// ======================================================
async function loadStudentInfo(studentId) {
  try {
    const q = query(collection(db, "users"), where("iduser", "==", studentId));
    const snapshot = await getDocs(q);

    if (snapshot.empty) {
      alert("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y sinh vi√™n c√≥ ID: " + studentId);
      document.getElementById("returnStudentName").value = "Kh√¥ng t√¨m th·∫•y";
      document.getElementById("returnMssv").value = "N/A";
      return;
    }

    const data = snapshot.docs[0].data();
    document.getElementById("returnStudentName").value = data.username || "";
    document.getElementById("returnMssv").value = data.mssv || "";

    console.log("‚úÖ ƒê√£ t·∫£i th√¥ng tin sinh vi√™n:", data.username);
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i th√¥ng tin sinh vi√™n:", err);
  }
}

// ======================================================
// üîπ Load danh s√°ch s√°ch ƒëang m∆∞·ª£n (Gi·ªØ nguy√™n)
// ======================================================
async function loadReturnBookList(studentId = null) {
  try {
    console.log("üìö ƒêang t·∫£i danh s√°ch s√°ch ƒëang m∆∞·ª£n...");

    isShowingWrongMessage = false;
    if (wrongReturnMessageTimeout) {
      clearTimeout(wrongReturnMessageTimeout);
      wrongReturnMessageTimeout = null;
    }
    hideWrongReturnMessage();
    const summaryBox = document.getElementById('selectedSummary');
    if (summaryBox) {
      summaryBox.style.display = 'none';
      summaryBox.innerHTML = '';
    }

    let q;
    if (studentId)
      q = query(collection(db, "history"),
        where("status", "==", "ƒêang m∆∞·ª£n"),
        where("studentId", "==", studentId));
    else
      q = query(collection(db, "history"), where("status", "==", "ƒêang m∆∞·ª£n"));

    const snapshot = await getDocs(q);
    const list = [];
    snapshot.forEach((doc) => list.push({ id: doc.id, ...doc.data() }));

    displayBorrowedBooks(list);
    console.log("üìö ƒê√£ load danh s√°ch s√°ch - reset tr·∫°ng th√°i");
  } catch (error) {
    console.error("‚ùå Firestore l·ªói khi load danh s√°ch:", error);
  }
}

// ======================================================
// üîπ Hi·ªÉn th·ªã danh s√°ch s√°ch ƒëang m∆∞·ª£n (Gi·ªØ nguy√™n)
// ======================================================
function displayBorrowedBooks(books) {
  const tbody = document.getElementById("borrowedBooksTableBody");
  const table = document.getElementById("borrowedBooksTable");
  const empty = document.getElementById("noBooksMessage");
  const count = document.getElementById("returnBookCount");
  const countBox = document.getElementById("bookCountReturn");

  tbody.innerHTML = "";

  if (!books.length) {
    empty.style.display = "flex";
    table.style.display = "none";
    count.textContent = 0;
    if (countBox) countBox.style.display = "none";
    window.clearAllSelected(); 
    return;
  }

  empty.style.display = "none";
  table.style.display = "table";

  books.forEach((b) => {
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td style="text-align:center;">
        <input type="checkbox" class="bookCheckbox"
          data-id="${b.id}"
          data-bookid="${b.bookId}"
          data-name="${b.bookName}"
          onchange="toggleSelectedBook(this)">
      </td>
      <td>${b.bookName}</td>
      <td>${b.bookId}</td>
      <td style="text-align:center;">${b.borrowDate}</td>
    `;    
    tbody.appendChild(tr);
  });

  count.textContent = books.length;
  if (countBox) countBox.style.display = "inline-flex";
}

// ======================================================
// üîπ Ch·ªçn / b·ªè ch·ªçn s√°ch (Gi·ªØ nguy√™n)
// ======================================================
window.toggleAllBooks = function(checkbox) {
  const all = document.querySelectorAll(".bookCheckbox");
  all.forEach(c => {
    c.checked = checkbox.checked;
    window.toggleSelectedBook(c);
  });
};

window.toggleSelectedBook = function(checkbox) {
  const selectedContainer = document.getElementById("selectedBooksItems");
  const list = document.getElementById("selectedBooksList");
  const msg = document.getElementById("noSelectedBooksMessage");
  const countEl = document.getElementById("selectedCount");
  const countBtn = document.getElementById("selectedCountBtn");
  const btn = document.getElementById("returnSelectedBtn");

  const id = checkbox.dataset.id;
  const bookId = checkbox.dataset.bookid;
  const name = checkbox.dataset.name;

  if (checkbox.checked) {
    let div = selectedContainer.querySelector(`[data-id='${id}']`);
    if (!div) {
      div = document.createElement("div");
      div.className = "selected-item";
      div.dataset.id = id;
      div.style = "padding:6px 0;border-bottom:1px solid #eee;display:flex;justify-content:space-between;align-items:center;";
      div.innerHTML = `
        <span style="color:#333;">${name}</span>
        <small style="color:#888;">ID: ${bookId}</small>
      `;      
      selectedContainer.appendChild(div);
    }
  } else {
    const div = selectedContainer.querySelector(`[data-id='${id}']`);
    if (div) div.remove();
  }

  const selectedCount = selectedContainer.children.length;
  if (selectedCount > 0) {
    msg.style.display = "none";
    list.style.display = "block";
    btn.disabled = false;
    btn.style.opacity = "1";
  } else {
    msg.style.display = "flex";
    list.style.display = "none";
    btn.disabled = true;
    btn.style.opacity = "0.5";
  }

  countEl.textContent = selectedCount;
  countBtn.textContent = selectedCount;
  
  updateSelectedSummary(null);
};


// ======================================================
// üîπ X√≥a t·∫•t c·∫£ ch·ªçn (Gi·ªØ nguy√™n)
// ======================================================
window.clearAllSelected = function() {
  document.querySelectorAll(".bookCheckbox").forEach(c => c.checked = false);
  document.getElementById("selectedBooksItems").innerHTML = "";
  document.getElementById("selectedBooksList").style.display = "none";
  document.getElementById("noSelectedBooksMessage").style.display = "flex";
  document.getElementById("selectedCount").textContent = "0";
  document.getElementById("selectedCountBtn").textContent = "0";
  document.getElementById("returnSelectedBtn").disabled = true;
  document.getElementById("returnSelectedBtn").style.opacity = "0.5";
  
  isShowingWrongMessage = false;
  if (wrongReturnMessageTimeout) {
    clearTimeout(wrongReturnMessageTimeout);
    wrongReturnMessageTimeout = null;
  }
  
  hideWrongReturnMessage();
  
  const wrongMsg = document.getElementById("wrongReturnMsg");
  if (wrongMsg) {
    wrongMsg.style.display = "none";
  }
  
  const summaryBox = document.getElementById('selectedSummary');
  if (summaryBox) {
    summaryBox.style.display = 'none';
    summaryBox.innerHTML = '';
  }
  
  console.log("üßπ ƒê√£ x√≥a t·∫•t c·∫£ ch·ªçn - reset tr·∫°ng th√°i");
};

// ======================================================
// üîπ N√∫t Tr·∫£ S√°ch (C·∫≠p nh·∫≠t logic d·ªçn d·∫πp RTDB)
// ======================================================
window.submitReturnBookForm = async function(e) {
  e.preventDefault();
  const selected = document.querySelectorAll("#selectedBooksItems .selected-item");
  const studentId = document.getElementById("returnStudentId").value.trim();

  if (selected.length === 0) {
    document.getElementById("returnValidationMessage").style.display = "block";
    setTimeout(() => {
      document.getElementById("returnValidationMessage").style.display = "none";
    }, 2000);
    return;
  }
  
  const submitBtn = document.getElementById("returnSelectedBtn");
  submitBtn.disabled = true;
  submitBtn.style.opacity = "0.5";

  let successCount = 0;
  for (const div of selected) {
    const historyId = div.dataset.id;
    const bookName = div.querySelector('span').textContent;
    const result = await processReturnBook(historyId, studentId, bookName);
    if (result) {
        successCount++;
    }
  }

  alert(`‚úÖ Tr·∫£ th√†nh c√¥ng ${successCount} cu·ªën s√°ch!`);
  
  // üí° LOGIC C·∫¨P NH·∫¨T: CH·ªà X√ìA NODE CON LI√äN QUAN ƒê·∫æN TR·∫¢ S√ÅCH
  // Gi·ªØ l·∫°i node /temp n·∫øu n√≥ c√≥ d·ªØ li·ªáu kh√¥ng li√™n quan ƒë·∫øn Tr·∫£ s√°ch (nh∆∞ c·ªù ho·∫∑c d·ªØ li·ªáu M∆∞·ª£n s√°ch ƒëang d√πng).
  try {
    await remove(ref(rtdb, "temp/student"));
    await remove(ref(rtdb, "temp/book"));
    await remove(ref(rtdb, "temp/books"));
    await remove(ref(rtdb, "book1")); // X√≥a node legacy
    
    console.log("üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu t·∫°m c·ªßa Tr·∫£ s√°ch (/temp/student, /temp/book, /temp/books, book1) ƒë·ªÉ tr√°nh xung ƒë·ªôt v·ªõi M∆∞·ª£n s√°ch.");
  } catch (err) {
      console.error("‚ùå L·ªói khi x√≥a d·ªØ li·ªáu t·∫°m c·ªßa Tr·∫£ s√°ch:", err);
  }
  
  window.clearAllSelected();
  loadReturnBookList(studentId);
  submitBtn.disabled = false;
  submitBtn.style.opacity = "1";
};

// ======================================================
// üîπ X·ª≠ l√Ω t·ª´ng s√°ch khi tr·∫£ (Gi·ªØ nguy√™n)
// ======================================================
async function processReturnBook(historyId, studentId, bookName) {
  try {
    const returnDate = new Date().toISOString().split("T")[0];
    const historyDocRef = doc(db, "history", historyId);
    const historyDoc = await getDoc(historyDocRef);
    
    if (!historyDoc.exists() || historyDoc.data().status !== 'ƒêang m∆∞·ª£n') {
        console.warn(`‚ö†Ô∏è L·ªãch s·ª≠ ID ${historyId} kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c tr·∫£.`);
        return false;
    }

    const data = historyDoc.data();
    const { bookId } = data;

    const firestoreUpdates = [
      updateDoc(historyDocRef, {
        status: "ƒê√£ tr·∫£",
        actualReturnDate: returnDate
      }),
      updateDoc(doc(db, "books", bookId), { status: "C√≤n" }),
      // X√ìA s√°ch kh·ªèi subcollection users/[studentId]/books
      deleteDoc(doc(db, "users", studentId, "books", bookId)).catch((e) => {
          console.warn(`L·ªói khi x√≥a sub-doc user/${studentId}/books/${bookId}:`, e.message);
      }),
    ];
    
    const rtdbUpdates = [
      update(ref(rtdb, `history/${historyId}`), {
        status: "ƒê√£ tr·∫£",
        actualReturnDate: returnDate
      }),
      update(ref(rtdb, `books/${bookId}`), { status: "C√≤n" }),
      // X√ìA s√°ch kh·ªèi sub-node users/[studentId]/books
      remove(ref(rtdb, `users/${studentId}/books/${bookId}`)),
    ];

    await Promise.all([...firestoreUpdates, ...rtdbUpdates]);

    console.log(`‚úÖ Tr·∫£ s√°ch ${bookName} (${bookId}) th√†nh c√¥ng`);
    return true;

  } catch (err) {
    console.error("‚ùå L·ªói khi tr·∫£ s√°ch:", err);
    alert(`‚ùå L·ªói khi tr·∫£ s√°ch ${bookName}: ${err.message}`);
    return false;
  }
}

// ======================================================
// üîπ X·ª≠ l√Ω th√¥ng b√°o (Gi·ªØ nguy√™n)
// ======================================================
function showWrongReturnMessage() {
  if (wrongReturnMessageTimeout) {
    clearTimeout(wrongReturnMessageTimeout);
    wrongReturnMessageTimeout = null;
  }

  isShowingWrongMessage = true;

  let el = document.getElementById("wrongReturnMsg");
  if (!el) {
    const container = document.getElementById("returnValidationMessage").parentElement;
    el = document.createElement("div");
    el.id = "wrongReturnMsg";
    el.style = "margin-top:10px;padding:8px 12px;background:rgba(244,67,54,0.1);border:1px solid rgba(244,67,54,0.3);border-radius:6px;font-size:0.85rem;color:#d32f2f;animation:fadeIn 0.3s ease;display:none;";
    el.innerHTML = `<ion-icon name="close-circle-outline" style="margin-right:4px;"></ion-icon>Tr·∫£ sai s√°ch vui l√≤ng ch·ªçn s√°ch kh√°c`;
    container.appendChild(el);
  }
  
  el.style.display = "block";
  el.style.animation = "fadeIn 0.3s ease";
  
  console.log("‚ö†Ô∏è Hi·ªÉn th·ªã th√¥ng b√°o: Tr·∫£ sai s√°ch vui l√≤ng ch·ªçn s√°ch kh√°c");
  
  wrongReturnMessageTimeout = setTimeout(() => {
    console.log("‚è∞ T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 4 gi√¢y");
    hideWrongReturnMessage();
  }, 4000);
}

function hideWrongReturnMessage() {
  if (wrongReturnMessageTimeout) {
    clearTimeout(wrongReturnMessageTimeout);
    wrongReturnMessageTimeout = null;
  }

  isShowingWrongMessage = false;

  const el = document.getElementById("wrongReturnMsg");
  if (el) {
    console.log("üîÑ ƒêang ·∫©n th√¥ng b√°o tr·∫£ sai s√°ch...");
    el.style.animation = "fadeOut 0.3s ease";
    setTimeout(() => {
      el.style.display = "none";
      console.log("‚úÖ ƒê√£ ·∫©n th√¥ng b√°o tr·∫£ sai s√°ch");
    }, 300);
  }
}

function updateSelectedSummary(payload) {
  const box = document.getElementById('selectedSummary');
  if (!box) return;
  if (!payload || payload.type === 'error') { 
    box.style.display = 'none'; 
    box.innerHTML = '';
    console.log("‚ùå ·∫®n banner th√†nh c√¥ng khi c√≥ l·ªói ho·∫∑c reset");
    
    if (payload && payload.type === 'error') {
        showWrongReturnMessage();
    }
    return; 
  }
  
  if (payload.type === 'success') {
    if (isShowingWrongMessage) {
      hideWrongReturnMessage();
    }
    
    box.style.display = 'block';
    box.style.border = '1px solid rgba(76,175,80,0.3)';
    box.style.background = 'rgba(76,175,80,0.06)';
    box.innerHTML = `
      <div style="display:flex;align-items:center;gap:8px;color:#2e7d32;">
        <ion-icon name="checkmark-circle-outline"></ion-icon>
        <strong>ƒê√£ ch·ªçn:</strong>
      </div>
      <div style="margin-top:6px;color:#2e7d32;">${payload.bookName || ''}</div>
      <small style="color:#2e7d32;">ID: ${payload.bookId || ''}</small>
    `;    
    console.log("‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng cho s√°ch:", payload.bookName);
  } 
}

window.loadReturnBookList = loadReturnBookList;
// ... (Gi·ªØ nguy√™n c√°c h√†m test RFID n·∫øu b·∫°n c·∫ßn)