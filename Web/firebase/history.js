// history.js - Load l·ªãch s·ª≠ m∆∞·ª£n tr·∫£ t·ª´ Firebase
console.log("‚úÖ history.js loaded");

import { db, rtdb } from './firebase.js';
import { collection, getDocs, query, orderBy, limit } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";
import { ref, onValue } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-database.js";

// Load l·ªãch s·ª≠ m∆∞·ª£n tr·∫£
window.loadHistory = async function() {
    try {
        console.log("üìö ƒêang t·∫£i l·ªãch s·ª≠ m∆∞·ª£n tr·∫£...");
        
        // Load t·ª´ Firestore
        const historyRef = collection(db, "history");
        const q = query(historyRef, orderBy("createdAt", "desc"), limit(100));
        const querySnapshot = await getDocs(q);
        
        const history = [];
        querySnapshot.forEach((doc) => {
            history.push({ id: doc.id, ...doc.data() });
        });
        
        console.log(`‚úÖ ƒê√£ t·∫£i ${history.length} b·∫£n ghi l·ªãch s·ª≠ t·ª´ Firestore`);
        
        // Hi·ªÉn th·ªã l·ªãch s·ª≠
        displayHistory(history);
        
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i l·ªãch s·ª≠:", error);
        
        // Fallback: Load t·ª´ Realtime Database
        try {
            console.log("üîÑ Th·ª≠ t·∫£i t·ª´ Realtime Database...");
            const historyRef = ref(rtdb, "history");
            onValue(historyRef, (snapshot) => {
                if (snapshot.exists()) {
                    const data = snapshot.val();
                    const history = Object.keys(data)
                        .map(key => ({ id: key, ...data[key] }))
                        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
                        .slice(0, 100); // Gi·ªõi h·∫°n 100 b·∫£n ghi g·∫ßn nh·∫•t
                    
                    console.log(`‚úÖ ƒê√£ t·∫£i ${history.length} b·∫£n ghi l·ªãch s·ª≠ t·ª´ Realtime DB`);
                    displayHistory(history);
                } else {
                    console.log("üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠");
                    displayHistory([]);
                }
            });
        } catch (rtdbError) {
            console.error("‚ùå L·ªói Realtime Database:", rtdbError);
            displayHistory([]);
        }
    }
};

// Hi·ªÉn th·ªã l·ªãch s·ª≠ trong b·∫£ng
function displayHistory(history) {
    const tableBody = document.getElementById('historyBody');
    if (!tableBody) {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y historyBody element");
        return;
    }
    
    // X√≥a n·ªôi dung c≈©
    tableBody.innerHTML = '';
    
    if (history.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="7" style="text-align: center; padding: 40px; color: #666; font-style: italic;">
                    üìö Kh√¥ng c√≥ l·ªãch s·ª≠ m∆∞·ª£n tr·∫£ n√†o
                </td>
            </tr>
        `;
        return;
    }
    
    // Hi·ªÉn th·ªã t·ª´ng b·∫£n ghi l·ªãch s·ª≠
    history.forEach((record, index) => {
        const row = document.createElement('tr');
        row.style.cssText = `
            transition: all 0.3s ease;
        `;
        
        // X√°c ƒë·ªãnh m√†u s·∫Øc tr·∫°ng th√°i
        let statusColor, statusBg;
        switch(record.status) {
            case 'ƒêang m∆∞·ª£n':
                statusColor = '#92400e';
                statusBg = '#fef3c7';
                break;
            case 'ƒê√£ tr·∫£':
                statusColor = '#065f46';
                statusBg = '#d1fae5';
                break;
            case 'Qu√° h·∫°n':
                statusColor = '#991b1b';
                statusBg = '#fee2e2';
                break;
            default:
                statusColor = '#374151';
                statusBg = '#f3f4f6';
        }
        
        row.innerHTML = `
            <td style="padding: 12px 8px; color: #333; font-weight: 500;">${record.studentName || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #666;">${record.studentId || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #333; font-weight: 500;">${record.bookName || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #666;">${record.bookId || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #666;">${formatDate(record.borrowDate) || 'N/A'}</td>
            <td style="padding: 12px 8px; color: #666;">${formatDate(record.returnDate) || 'N/A'}</td>
            <td style="padding: 12px 8px;">
                <span style="
                    padding: 6px 12px;
                    border-radius: 20px;
                    font-size: 0.85rem;
                    font-weight: 600;
                    background: ${statusBg};
                    color: ${statusColor};
                ">
                    ${record.status || 'N/A'}
                </span>
            </td>
        `;
        
        // Th√™m hover effect
        row.addEventListener('mouseenter', function() {
            this.style.background = '#f8fafc';
        });
        
        row.addEventListener('mouseleave', function() {
            this.style.background = '';
        });
        
        tableBody.appendChild(row);
    });
    
    console.log(`‚úÖ ƒê√£ hi·ªÉn th·ªã ${history.length} b·∫£n ghi l·ªãch s·ª≠`);
}

// Format date t·ª´ string sang ƒë·ªãnh d·∫°ng Vi·ªát Nam
function formatDate(dateString) {
    if (!dateString) return 'N/A';
    
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('vi-VN', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    } catch (error) {
        return dateString; // Tr·∫£ v·ªÅ string g·ªëc n·∫øu kh√¥ng parse ƒë∆∞·ª£c
    }
}

// Load l·ªãch s·ª≠ khi trang load
document.addEventListener('DOMContentLoaded', function() {
    // Ch·ªâ load n·∫øu ƒëang ·ªü trang Admin
    if (window.location.pathname.includes('Admin')) {
        console.log("üîç ƒêang ·ªü trang Admin, load l·ªãch s·ª≠...");
        // Kh√¥ng t·ª± ƒë·ªông load, ch·ªâ load khi user click v√†o tab History
    }
});

// Export function ƒë·ªÉ c√°c file kh√°c c√≥ th·ªÉ g·ªçi
window.loadHistory = loadHistory;