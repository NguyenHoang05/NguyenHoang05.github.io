console.log("‚úÖ borrow.js loaded");

import { db, rtdb } from './firebase.js';
import { doc, setDoc, updateDoc } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";
import { ref, set, update, onValue, remove } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-database.js";

// üîπ ƒê√≥ng modal
window.closeBorrowForm = function () {
  document.getElementById("borrowModal").style.display = "none";
};

// üîπ M·ªü modal v√† t·ª± ƒë·ªông load d·ªØ li·ªáu t·ª´ temp
window.openBorrowForm = function () {
  document.getElementById("borrowModal").style.display = "flex";

  const tempRef = ref(rtdb, "temp");
  onValue(tempRef, (snapshot) => {
    if (!snapshot.exists()) return;
    const temp = snapshot.val();

    // üßë‚Äçüéì Hi·ªÉn th·ªã th√¥ng tin sinh vi√™n
    if (temp.student) {
      const s = temp.student;
      document.getElementById("studentName").value = s.username || "";
      document.getElementById("studentId").value = s.iduser || "";
      document.getElementById("studentCode").value = s.mssv || "";
      document.getElementById("studentClass").value = s.class || "";
    }

    // üìö Hi·ªÉn th·ªã danh s√°ch nhi·ªÅu s√°ch (book1, book2,‚Ä¶)
    const booksContainer = document.getElementById("booksContainer");
    booksContainer.innerHTML = ""; // X√≥a c√°c d√≤ng c≈©

    if (temp.books) {
      Object.keys(temp.books).forEach((key) => {
        const book = temp.books[key];
        const div = document.createElement("div");
        div.classList.add("book-row");
        div.style = "display:flex;gap:8px;margin-bottom:10px;align-items:end;padding:10px;background:white;border-radius:6px;border:1px solid #e1e5e9;";

        // ‚ö†Ô∏è PH·∫¢I d√πng backtick ƒë·ªÉ render HTML template
        div.innerHTML = `
          <div style="flex:2;">
            <label style="display:block;margin-bottom:3px;color:#333;font-weight:500;font-size:0.8rem;">ID S√°ch:</label>
            <input type="text" name="bookId" value="${book.id || ""}" required style="width:100%;padding:6px 8px;border:1px solid #e1e5e9;border-radius:4px;">
          </div>
          <div style="flex:3;">
            <label style="display:block;margin-bottom:3px;color:#333;font-weight:500;font-size:0.8rem;">T√™n S√°ch:</label>
            <input type="text" name="bookName" value="${book.title || ""}" required style="width:100%;padding:6px 8px;border:1px solid #e1e5e9;border-radius:4px;">
          </div>
          <div style="flex:1;display:flex;align-items:center;justify-content:center;">
            <button type="button" onclick="removeBookRow(this)" style="background:#f44336;color:white;border:none;padding:6px 8px;border-radius:4px;">X</button>
          </div>
        `;

        booksContainer.appendChild(div);
      });

      document.getElementById("bookCount").textContent =
        Object.keys(temp.books).length;
    }
  });
};

// üîπ X√≥a d√≤ng s√°ch
window.removeBookRow = function (btn) {
  btn.closest(".book-row").remove();
  const count = document.querySelectorAll(".book-row").length;
  document.getElementById("bookCount").textContent = count;
};

// üîπ Submit form m∆∞·ª£n s√°ch
window.submitBorrowForm = async function (event) {
  event.preventDefault();

  // L·∫•y th√¥ng tin sinh vi√™n
  const studentName = document.getElementById("studentName").value.trim();
  const studentId = document.getElementById("studentId").value.trim();
  const studentCode = document.getElementById("studentCode").value.trim();
  const studentClass = document.getElementById("studentClass").value.trim();
  const borrowDate = document.getElementById("borrowDate").value;
  const returnDate = document.getElementById("returnDate").value;

  // L·∫•y danh s√°ch s√°ch
  const bookRows = document.querySelectorAll(".book-row");
  const books = [];
  bookRows.forEach((row) => {
    const bookId = row.querySelector('input[name="bookId"]').value.trim();
    const bookName = row.querySelector('input[name="bookName"]').value.trim();
    if (bookId && bookName) books.push({ bookId, bookName });
  });

  if (!studentName || !studentId || !borrowDate || !returnDate) {
    alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin sinh vi√™n!");
    return;
  }
  if (books.length === 0) {
    alert("‚ö†Ô∏è Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt cu·ªën s√°ch!");
    return;
  }

  try {
    const results = [];

    for (let i = 0; i < books.length; i++) {
      const b = books[i];
      const historyId = `${studentId}_${b.bookId}_${borrowDate}_${i}`;

      const data = {
        studentName,
        studentId,
        studentCode,
        studentClass,
        bookId: b.bookId,
        bookName: b.bookName,
        borrowDate,
        returnDate,
        status: "ƒêang m∆∞·ª£n",
        createdAt: new Date().toISOString(),
        borrowOrder: i + 1,
        totalBooks: books.length,
      };

      // Firestore
      await setDoc(doc(db, "history", historyId), data);

      // Realtime
      await set(ref(rtdb, "history/" + historyId), data);

      // Update tr·∫°ng th√°i s√°ch
      await updateDoc(doc(db, "books", b.bookId), { status: "ƒê√£ m∆∞·ª£n" }).catch(() => {});
      await update(ref(rtdb, "books/" + b.bookId), { status: "ƒê√£ m∆∞·ª£n" });

      // Th√™m v√†o profile user (trong Firestore)
      await setDoc(doc(db, "users", studentId, "books", b.bookId), {
        bookName: b.bookName,
        borrowDate,
        returnDate,
        status: "ƒêang m∆∞·ª£n",
      });

      results.push(b.bookName);
    }

    // X√≥a temp
    await remove(ref(rtdb, "temp"));

    // ‚ö†Ô∏è D√πng backtick ƒë·ªÉ in danh s√°ch
    alert(`üìö ƒê√£ m∆∞·ª£n th√†nh c√¥ng ${results.length} cu·ªën:\n${results.join("\n")}`);
    document.getElementById("borrowForm").reset();
    closeBorrowForm();
  } catch (error) {
    console.error("‚ùå L·ªói khi m∆∞·ª£n s√°ch:", error);
    alert("Kh√¥ng th·ªÉ m∆∞·ª£n s√°ch: " + error.message);
  }
};
