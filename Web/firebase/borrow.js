console.log("‚úÖ borrow.js loaded");

import { db, rtdb } from './firebase.js';
import { doc, setDoc, updateDoc } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";
import { ref, set, update, onValue, remove ,get } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-database.js";

// H√†m ƒë√≥ng modal
window.closeBorrowForm = function () {
  document.getElementById("borrowModal").style.display = "none";
}

// H√†m m·ªü modal
window.openBorrowForm = function () {
  document.getElementById("borrowModal").style.display = "flex";

  // üî• Theo d√µi realtime temp ‚Üí t·ª± ƒëi·ªÅn form khi c√≥ thay ƒë·ªïi
  const tempRef = ref(rtdb, "temp");
  onValue(tempRef, (snapshot) => {
    if (snapshot.exists()) {
      const temp = snapshot.val();

      // L·∫•y d·ªØ li·ªáu student
      if (temp.student) {
        document.getElementById("studentName").value = temp.student.username || "";
        document.getElementById("studentId").value = temp.student.iduser || "";
      }

      // L·∫•y d·ªØ li·ªáu book
      if (temp.book) {
        document.getElementById("bookId").value = temp.book.id || "";
        document.getElementById("bookNameBorrow").value = temp.book.title || "";
      }
    }
  });
}

// H√†m submit form m∆∞·ª£n s√°ch (h·ªó tr·ª£ multiple books)
window.submitBorrowForm = async function (event) {
  event.preventDefault();

  // L·∫•y th√¥ng tin sinh vi√™n
  const studentName = document.getElementById("studentName").value.trim();
  const studentId = document.getElementById("studentId").value.trim();
  const borrowDate = document.getElementById("borrowDate").value;
  const returnDate = document.getElementById("returnDate").value;

  // L·∫•y danh s√°ch s√°ch t·ª´ form
  const bookRows = document.querySelectorAll('.book-row');
  const books = [];
  
  bookRows.forEach((row, index) => {
    const bookId = row.querySelector('input[name="bookId"]').value.trim();
    const bookName = row.querySelector('input[name="bookName"]').value.trim();
    
    if (bookId && bookName) {
      books.push({
        bookId: bookId,
        bookName: bookName
      });
    }
  });

  // Validation
  if (!studentName || !studentId || !borrowDate || !returnDate) {
    alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin sinh vi√™n!");
    return;
  }

  if (books.length === 0) {
    alert("‚ö†Ô∏è Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt cu·ªën s√°ch!");
    return;
  }

  // Ki·ªÉm tra tr√πng l·∫∑p ID s√°ch
  const bookIds = books.map(book => book.bookId);
  const uniqueBookIds = [...new Set(bookIds)];
  if (bookIds.length !== uniqueBookIds.length) {
    alert("‚ö†Ô∏è Kh√¥ng ƒë∆∞·ª£c m∆∞·ª£n c√πng m·ªôt cu·ªën s√°ch nhi·ªÅu l·∫ßn!");
    return;
  }

  try {
    // üî• L·∫•y th√™m d·ªØ li·ªáu t·ª´ temp (student)
    const tempSnap = await get(ref(rtdb, "temp"));
    let extraData = {};
    if (tempSnap.exists()) {
      const temp = tempSnap.val();
      if (temp.student) {
        extraData.mssv = temp.student.mssv || "";
        extraData.email = temp.student.email || "";
      }
    }

    const results = [];
    const errors = [];

    // X·ª≠ l√Ω t·ª´ng cu·ªën s√°ch
    for (let i = 0; i < books.length; i++) {
      const book = books[i];
      
      try {
        const historyId = `${studentId}_${book.bookId}_${borrowDate}_${i}`;
        
        const historyData = {
          studentName,
          studentId,
          bookId: book.bookId,
          bookName: book.bookName,
          borrowDate,
          returnDate,
          status: "ƒêang m∆∞·ª£n",
          createdAt: new Date().toISOString(),
          borrowOrder: i + 1, // Th·ª© t·ª± m∆∞·ª£n s√°ch
          totalBooks: books.length, // T·ªïng s·ªë s√°ch m∆∞·ª£n
          ...extraData
        };

        // 1Ô∏è‚É£ L∆∞u v√†o Firestore
        await setDoc(doc(db, "history", historyId), historyData);
        console.log(`‚úÖ Firestore ghi th√†nh c√¥ng cho s√°ch ${i + 1}!`);

        // 2Ô∏è‚É£ L∆∞u v√†o Realtime DB
        await set(ref(rtdb, "history/" + historyId), historyData);
        console.log(`‚úÖ Realtime DB ghi th√†nh c√¥ng cho s√°ch ${i + 1}!`);

        // 3Ô∏è‚É£ Update tr·∫°ng th√°i s√°ch
        try {
          await updateDoc(doc(db, "books", book.bookId), { status: "ƒê√£ m∆∞·ª£n" });
          await update(ref(rtdb, "books/" + book.bookId), { status: "ƒê√£ m∆∞·ª£n" });
          console.log(`‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i s√°ch ${book.bookId} th√†nh c√¥ng!`);
        } catch (err) {
          console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√°ch ${book.bookId} trong books ƒë·ªÉ update!`, err);
        }

        // 4Ô∏è‚É£ Th√™m s√°ch v√†o user profile
        try {
          await setDoc(doc(db, "users", studentId, "books", book.bookId), {
            bookName: book.bookName,
            borrowDate,
            returnDate,
            status: "ƒêang m∆∞·ª£n",
            borrowOrder: i + 1
          });
          console.log(`‚úÖ ƒê√£ l∆∞u s√°ch ${book.bookId} v√†o user profile!`);
        } catch (err) {
          console.error(`‚ùå L·ªói khi l∆∞u s√°ch ${book.bookId} v√†o user profile:`, err);
        }

        results.push({
          bookId: book.bookId,
          bookName: book.bookName,
          success: true
        });

      } catch (error) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω s√°ch ${book.bookId}:`, error);
        errors.push({
          bookId: book.bookId,
          bookName: book.bookName,
          error: error.message
        });
      }
    }

    // 5Ô∏è‚É£ X√≥a temp sau khi ho√†n th√†nh
    await remove(ref(rtdb, "temp"));
    console.log("üóëÔ∏è ƒê√£ x√≥a temp sau khi m∆∞·ª£n!");

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    let successMessage = `üìö M∆∞·ª£n s√°ch th√†nh c√¥ng!\n\nTh√¥ng tin sinh vi√™n:\n- T√™n: ${studentName}\n- ID Sinh Vi√™n: ${studentId}\n- Ng√†y m∆∞·ª£n: ${borrowDate}\n- Ng√†y tr·∫£: ${returnDate}\n\nS√°ch ƒë√£ m∆∞·ª£n (${results.length}/${books.length}):\n`;
    
    results.forEach((result, index) => {
      successMessage += `${index + 1}. ${result.bookName} (ID: ${result.bookId})\n`;
    });

    if (errors.length > 0) {
      successMessage += `\n‚ö†Ô∏è L·ªói khi m∆∞·ª£n:\n`;
      errors.forEach((error, index) => {
        successMessage += `${index + 1}. ${error.bookName} (ID: ${error.bookId}): ${error.error}\n`;
      });
    }

    alert(successMessage);
    
    // Reset form v√† ƒë√≥ng modal
    document.getElementById("borrowForm").reset();
    if (window.closeBorrowForm) {
      closeBorrowForm();
    }
    
    // Reload danh s√°ch s√°ch n·∫øu ƒëang ·ªü trang List
    if (window.loadBookList) {
        loadBookList();
    }

  } catch (error) {
    console.error("‚ùå L·ªói t·ªïng th·ªÉ khi m∆∞·ª£n s√°ch:", error);
    alert("Kh√¥ng th·ªÉ m∆∞·ª£n s√°ch: " + error.message);
  }
};

