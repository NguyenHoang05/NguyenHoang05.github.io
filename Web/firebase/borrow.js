console.log("‚úÖ borrow.js loaded");

import { db, rtdb } from './firebase.js';
import { doc, setDoc, updateDoc } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";
import { ref, set, update, remove, get } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-database.js";

// üîπ Hi·ªÉn th·ªã s√°ch ƒëang m∆∞·ª£n c·ªßa sinh vi√™n
window.loadStudentBorrowedBooks = async function (studentId) {
  console.log("üìå studentId:", studentId);

  const booksRef = ref(rtdb, `users/${studentId}/books`);
  const snapshot = await get(booksRef);

  const tbody = document.getElementById("currentBorrowedBooksTableBody");
  tbody.innerHTML = "";

  if (!snapshot.exists()) {
    document.getElementById("noCurrentBooksMessage").style.display = "flex";
    document.getElementById("currentBorrowedBooksTable").style.display = "none";
    document.getElementById("borrowBookCount").style.display = "none";
    return;
  }

  const books = snapshot.val();

  Object.entries(books).forEach(([bookId, book]) => {
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td>${book.bookName || "Kh√¥ng r√µ"}</td>
      <td>${bookId}</td>
      <td style="text-align:center;">${book.borrowDate || "-"}</td>
      <td style="text-align:center;">${book.status || "?"}</td>
    `;
    tbody.appendChild(tr);
  });

  document.getElementById("noCurrentBooksMessage").style.display = "none";
  document.getElementById("currentBorrowedBooksTable").style.display = "table";
  document.getElementById("borrowBookCount").style.display = "inline-block";
  document.getElementById("currentBorrowCount").textContent = Object.keys(books).length;
};

// üîπ ƒê√≥ng modal
window.closeBorrowForm = function () {
  document.getElementById("borrowModal").style.display = "none";
};

// üîπ M·ªü modal v√† t·ª± ƒë·ªông load d·ªØ li·ªáu t·ª´ temp
window.openBorrowForm = function () {
  document.getElementById("borrowModal").style.display = "flex";

  const tempRef = ref(rtdb, "temp");
  import("https://www.gstatic.com/firebasejs/11.10.0/firebase-database.js").then(({ onValue }) => {
    onValue(tempRef, (snapshot) => {
      if (!snapshot.exists()) return;
      const temp = snapshot.val();

      if (temp.student) {
        const s = temp.student;
        document.getElementById("studentName").value = s.username || "";
        document.getElementById("studentId").value = s.iduser || s.id || "";
        document.getElementById("mssv").value = s.mssv || "";
        document.getElementById("studentClass").value = s.class || "";

        const studentId = s.iduser || s.id || "";
        if (studentId) window.loadStudentBorrowedBooks(studentId);
      }

      const booksContainer = document.getElementById("booksContainer");
      booksContainer.innerHTML = "";

      if (temp.books) {
        Object.keys(temp.books).forEach((key) => {
          const book = temp.books[key];
          addBookRow(book.id || "", book.title || "");
        });

        document.getElementById("bookCount").textContent = Object.keys(temp.books).length;
      }
    });
  });
};

// üîî Theo d√µi d·ªØ li·ªáu RFID ƒë·ªÉ t·ª± ƒë·ªông m·ªü form
const tempRef = ref(rtdb, "temp");
import("https://www.gstatic.com/firebasejs/11.10.0/firebase-database.js").then(({ onValue }) => {
  onValue(tempRef, (snapshot) => {
    if (!snapshot.exists()) return;
    const modal = document.getElementById("borrowModal");
    if (modal.style.display !== "flex") openBorrowForm();
  });
});

// üîπ Th√™m d√≤ng nh·∫≠p s√°ch
function addBookRow(bookId = "", bookName = "") {
  const booksContainer = document.getElementById("booksContainer");
  const div = document.createElement("div");
  div.classList.add("book-row");
  div.style = "display:flex;gap:8px;margin-bottom:10px;align-items:end;padding:10px;background:white;border-radius:6px;border:1px solid #e1e5e9;";

  div.innerHTML = `
    <div style="flex:2;">
      <label>ID S√°ch:</label>
      <input type="text" name="bookId" value="${bookId}" required>
    </div>
    <div style="flex:3;">
      <label>T√™n S√°ch:</label>
      <input type="text" name="bookName" value="${bookName}" required>
    </div>
    <div style="flex:1;">
      <button type="button" onclick="removeBookRow(this)">X</button>
    </div>
  `;
  booksContainer.appendChild(div);
}

// üîπ X√≥a d√≤ng s√°ch
window.removeBookRow = function (btn) {
  btn.closest(".book-row").remove();
  const count = document.querySelectorAll(".book-row").length;
  document.getElementById("bookCount").textContent = count;
};

// ===== Thay th·∫ø to√†n b·ªô h√†m submitBorrowForm b·∫±ng ƒëo·∫°n n√†y =====
window.submitBorrowForm = async function (event) {
  event.preventDefault();
  console.log("‚ñ∂ submitBorrowForm called");

  // helper: l·∫•y element v√† b√°o l·ªói n·∫øu kh√¥ng t·ªìn t·∫°i
  const getEl = (id) => {
    const e = document.getElementById(id);
    if (!e) console.warn(`Kh√¥ng t√¨m th·∫•y element id="${id}"`);
    return e;
  };

  const studentNameEl = getEl("studentName");
  const studentIdEl = getEl("studentId");
  const mssvEl = getEl("mssv");
  const studentClassEl = getEl("studentClass");
  const borrowDateEl = getEl("borrowDate");
  const returnDateEl = getEl("returnDate");

  // Bail out n·∫øu nh·ªØng field b·∫Øt bu·ªôc kh√¥ng t·ªìn t·∫°i (tr√°nh l·ªói null.value)
  if (!studentNameEl || !studentIdEl || !borrowDateEl || !returnDateEl) {
    alert("L·ªói: Form b·ªã thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc. Ki·ªÉm tra id c√°c input (studentName, studentId, borrowDate, returnDate).");
    return;
  }

  // L·∫•y gi√° tr·ªã (an to√†n)
  const studentName = (studentNameEl.value || "").trim();
  const studentId = (studentIdEl.value || "").trim();
  const studentCode = (mssvEl && mssvEl.value) ? mssvEl.value.trim() : "";
  const studentClass = (studentClassEl && studentClassEl.value) ? studentClassEl.value.trim() : "";
  const borrowDate = (borrowDateEl.value || "").trim();
  const returnDate = (returnDateEl.value || "").trim();

  // L·∫•y danh s√°ch s√°ch t·ª´ c√°c .book-row (d√π l√† input ƒë·ªông)
  const bookRows = document.querySelectorAll(".book-row");
  const books = [];
  bookRows.forEach((row) => {
    const bookIdInput = row.querySelector('input[name="bookId"]');
    const bookNameInput = row.querySelector('input[name="bookName"]');
    if (!bookIdInput || !bookNameInput) {
      console.warn("B·ªè qua 1 book-row v√¨ thi·∫øu input[name='bookId'] ho·∫∑c input[name='bookName']:", row);
      return;
    }
    const bookId = (bookIdInput.value || "").trim();
    const bookName = (bookNameInput.value || "").trim();
    if (bookId && bookName) books.push({ bookId, bookName });
  });

  // Validate d·ªØ li·ªáu b·∫Øt bu·ªôc
  if (!studentName || !studentId || !borrowDate || !returnDate) {
    alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin sinh vi√™n v√† ng√†y m∆∞·ª£n/tr·∫£!");
    return;
  }
  if (books.length === 0) {
    alert("‚ö†Ô∏è Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt cu·ªën s√°ch!");
    return;
  }

  try {
    const results = [];

    for (let i = 0; i < books.length; i++) {
      const b = books[i];
      // t·∫°o history id (ƒë·∫£m b·∫£o kh√¥ng c√≥ k√Ω t·ª± nguy hi·ªÉm)
      const historyId = `${studentId}_${b.bookId}_${borrowDate}_${i}`;

      const data = {
        studentName,
        studentId,
        studentCode,
        studentClass,
        bookId: b.bookId,
        bookName: b.bookName,
        borrowDate,
        returnDate,
        status: "ƒêang m∆∞·ª£n",
        createdAt: new Date().toISOString(),
      };

      // Firestore
      await setDoc(doc(db, "history", historyId), data);
      // Realtime
      await set(ref(rtdb, "history/" + historyId), data);
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i s√°ch (Firestore + Realtime)
      await updateDoc(doc(db, "books", b.bookId), { status: "ƒê√£ m∆∞·ª£n" }).catch(() => {});
      await update(ref(rtdb, "books/" + b.bookId), { status: "ƒê√£ m∆∞·ª£n" });
      // Th√™m v√†o profile user (Firestore)
      await setDoc(doc(db, "users", studentId, "books", b.bookId), {
        bookName: b.bookName,
        borrowDate,
        returnDate,
        status: "ƒêang m∆∞·ª£n",
      });

      results.push(b.bookName);
    }

    // X√≥a temp tr√™n Realtime DB
    await remove(ref(rtdb, "temp"));

    alert(`üìö ƒê√£ m∆∞·ª£n th√†nh c√¥ng ${results.length} cu·ªën:\n${results.join("\n")}`);

    // Reset form v√† c·∫≠p nh·∫≠t UI
    const form = document.getElementById("borrowForm");
    if (form) form.reset();

    closeBorrowForm();
    // C·∫≠p nh·∫≠t l·∫°i b·∫£ng s√°ch ƒëang m∆∞·ª£n
    window.loadStudentBorrowedBooks(studentId);
  } catch (error) {
    console.error("‚ùå L·ªói khi m∆∞·ª£n s√°ch:", error);
    alert("Kh√¥ng th·ªÉ m∆∞·ª£n s√°ch: " + (error && error.message ? error.message : error));
  }
};
// ===== end submitBorrowForm replacement =====
